/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import Clases.ListaTickets;
import Clases.Ticket;
import Clases.Usuario;
import controladores.TicketControlador;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ramir
 */
public class PanelMisTickets extends javax.swing.JPanel {

    private Usuario usuario;
    private TicketControlador controlador;
    private ListaTickets listaCompleta;
    private ListaTickets listaAtendidos;
    
    /**
     * Creates new form PanelMisTickets
     */
    public PanelMisTickets() {
        return;  // Llama al otro constructor con un usuario por defecto
    }
    
   
    
    /**
     * Creates new form PanelTickets
     * @param usuario Se la vista
     */
    public PanelMisTickets(Usuario usuario) {
        this.usuario = usuario;
        this.controlador = new TicketControlador();
        this.listaCompleta = new ListaTickets();
        this.listaAtendidos = new ListaTickets();
        initComponents();
        cargarTickets();
        
    }

    public void cargarTickets() {
        try {
            if (controlador == null) {
                System.err.println("Error: listaUsuariosControlador es null. No se pueden cargar los usuarios.");
                return;
            }

            // Obtener la lista desde el controlador
            List<Ticket> tickets = controlador.buscarTickets(usuario);
            
            if (tickets == null) {
                System.err.println("Error: La lista de usuarios obtenida es null.");
                return;
            }

            // Reiniciar listas
            listaCompleta.removerTickets();
            listaAtendidos.removerTickets();

            // Almacenar usuarios en las listas
            listaCompleta.agregarTickets(tickets);
            listaAtendidos.agregarTickets(listaCompleta.filtrarPorEstado("Atendido"));
            
            DefaultTableModel modelo = (DefaultTableModel) tablaTickets.getModel();
            modelo.setRowCount(0); // Limpiar la tabla

            for (Ticket tkt : listaAtendidos.obtenerTodos()) {
                if (tkt != null) {
                    modelo.addRow(new Object[]{
                        tkt.getTicket_id(),
                        tkt.getTecnico(),
                        tkt.getInformador().getNombre()
                    });
                }
            }

        } catch (Exception e) {
            System.err.println("Error inesperado al cargar usuarios: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    public void reiniciarLista() {
        DefaultTableModel modelo = (DefaultTableModel) tablaTickets.getModel();
        listaAtendidos.removerTickets();
        listaAtendidos.agregarTickets(listaCompleta.filtrarPorEstado("Atendido"));
        modelo.setRowCount(0); // Limpiar la tabla
        for (Ticket tkt : listaAtendidos.obtenerTodos()) {
            if (tkt != null) {
                modelo.addRow(new Object[]{
                    tkt.getTicket_id(),
                    tkt.getTecnico(),
                    tkt.getInformador().getNombre()
                });
            }
        }
            
    }
    
    public void mostrarMensaje(String mensaje, String titulo, int tipoMensaje){
        JOptionPane.showMessageDialog(null, mensaje, titulo, tipoMensaje);
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaTickets = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Estado:");

        tablaTickets.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "N° Ticket", "Titulo", "Solicitado por"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);

        // Aplica el renderer a todas las columnas
        for (int i = 0; i < tablaTickets.getColumnModel().getColumnCount(); i++) {
            tablaTickets.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
        tablaTickets.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaTicketsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaTickets);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Atendido");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Asignados a mí");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 690, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addGap(65, 65, 65))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tablaTicketsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaTicketsMouseClicked
        int filaSeleccionada = tablaTickets.getSelectedRow();

        if (filaSeleccionada != -1) { // Verifica que haya una fila seleccionada

            Ticket ticket = listaAtendidos.buscarPorIndice(filaSeleccionada);

/*            TicketVistaTrabajador dialog = new TicketVistaTrabajador((JFrame) SwingUtilities.getWindowAncestor(this), usuario, this, ticket);
            dialog.setSize(800, 500);
            dialog.setLocationRelativeTo(this); // Centrar el diálogo
            dialog.setVisible(true);
*/
        }else{
            System.out.println(filaSeleccionada);
        }
    }//GEN-LAST:event_tablaTicketsMouseClicked

  
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaTickets;
    // End of variables declaration//GEN-END:variables
}
